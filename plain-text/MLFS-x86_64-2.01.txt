# perform as root:
export MLFS=/mnt/mlfs
mkdir -pv $MLFS

mkdir -v $MLFS/sources
chmod -v a+wt $MLFS/sources

#download sources + patches


mkdir -v $MLFS/cross-tools
mkdir -v $MLFS/tools
ln -sv   $MLFS/cross-tools /
ln -sv   $MLFS/tools /

groupadd mlfs
useradd -s /bin/bash -g mlfs -m -k /dev/null mlfs
passwd mlfs

chown -v mlfs $MLFS/cross-tools
chown -v mlfs $MLFS/sources

# Now run as mlfs user
su - mlfs

cat > ~/.bash_profile << "EOF"
exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash
EOF

cat > ~/.bashrc << "EOF"
set +h
umask 022
MLFS=/mnt/mlfs
LC_ALL=POSIX
MLFS_TGT=$(uname -m)-mlfs-linux-musl
PATH=/bin:/usr/bin:/cross-tools/bin:/tools/bin
export MLFS LC_ALL MLFS_TGT PATH
EOF

source ~/.bash_profile

#CFLAGS and CXXFLAGS must not be set during the building of cross-tools. 
unset CFLAGS
unset CXXFLAGS
cat >> ~/.bashrc << EOF
unset CFLAGS
unset CXXFLAGS
EOF

#Build Variables:
export MLFS_HOST="$(echo $MACHTYPE | \
    sed "s/$(echo $MACHTYPE | cut -d- -f2)/cross/")"
export MLFS_TARGET="x86_64-linux-musl"
cat >> ~/.bashrc << EOF
export MLFS_HOST="${MLFS_HOST}"
export MLFS_TARGET="${MLFS_TARGET}"
export MLFS_ARCH=x86
export MLFS_CPU=x86-64
EOF
source ~/.bashrc

# perform as root:
export MLFS=/mnt/mlfs
mkdir -pv $MLFS

mkdir -v $MLFS/sources
chmod -v a+wt $MLFS/sources

#download sources + patches


mkdir -v $MLFS/cross-tools
mkdir -v $MLFS/tools
ln -sv   $MLFS/cross-tools /
ln -sv   $MLFS/tools /

groupadd mlfs
useradd -s /bin/bash -g mlfs -m -k /dev/null mlfs
passwd mlfs

chown -v mlfs $MLFS/cross-tools
chown -v mlfs $MLFS/sources

# Now run as mlfs user
su - mlfs

cat > ~/.bash_profile << "EOF"
exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash
EOF

cat > ~/.bashrc << "EOF"
set +h
umask 022
MLFS=/mnt/mlfs
LC_ALL=POSIX
MLFS_TGT=$(uname -m)-mlfs-linux-musl
PATH=/bin:/usr/bin:/cross-tools/bin:/tools/bin
export MLFS LC_ALL MLFS_TGT PATH
EOF

source ~/.bash_profile

#CFLAGS and CXXFLAGS must not be set during the building of cross-tools. 
unset CFLAGS
unset CXXFLAGS
cat >> ~/.bashrc << EOF
unset CFLAGS
unset CXXFLAGS
EOF

#Build Variables:
export MLFS_HOST="$(echo $MACHTYPE | \
    sed "s/$(echo $MACHTYPE | cut -d- -f2)/cross/")"
export MLFS_TARGET="x86_64-linux-musl"
cat >> ~/.bashrc << EOF
export MLFS_HOST="${MLFS_HOST}"
export MLFS_TARGET="${MLFS_TARGET}"
export MLFS_ARCH=x86
export MLFS_CPU=x86-64
EOF
source ~/.bashrc

# as mlfs user:

==[ToolChain: Kernel Headers]==
make mrproper
make ARCH=${MLFS_ARCH} headers_check
make ARCH=${MLFS_ARCH} INSTALL_HDR_PATH=/cross-tools/${MLFS_TARGET} headers_install

==[ToolChain: Binutils]==
mkdir -v build && cd build
../configure \
   --prefix=/cross-tools \
   --target=${MLFS_TARGET} \
   --with-sysroot=/cross-tools/${MLFS_TARGET} \
   --disable-nls \
   --disable-multilib \
   --enable-deterministic-archives \
   --disable-compressed-debug-sections \
   --disable-werror \
   --disable-ppl-version-check \
   --disable-cloog-version-check
make configure-host
make && make install

==[ToolChain: GCC Static]==
tar -xf ../mpfr-4.0.1.tar.xz
mv -v mpfr-4.0.1 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc
patch -Np1 -i ../gcc-7.3.0-dragora-musl-fixes.patch
mkdir -v build && cd  build
../configure \
	  --prefix=/cross-tools \
	  --build=${MLFS_HOST} \
	  --host=${MLFS_HOST} \
	  --target=${MLFS_TARGET} \
	  --with-sysroot=/cross-tools/${MLFS_TARGET} \
	  --disable-nls  \
	  --disable-shared \
	  --without-headers \
	  --with-newlib \
	  --disable-decimal-float \
	  --disable-libgomp \
	  --disable-libmudflap \
	  --disable-libssp \
	  --disable-libatomic \
	  --disable-libquadmath \
	  --disable-threads \
	  --enable-languages=c \
	  --disable-multilib \
	  --with-arch=${MLFS_CPU} \
	  --enable-clocale=generic \
	  --disable-decimal-float \
	  --disable-libitm \
	  --disable-libvtv \
	  --disable-libcilkrts \
	  --disable-libstdcxx \
	  --disable-gnu-indirect-function \
	  --disable-libsanitizer \
	  --disable-libmpx \
	  --without-ppl \
	  --without-cloog 
make all-gcc all-target-libgcc
make install-gcc install-target-libgcc

==[ TC : Musl Libc]==
./configure \
  CROSS_COMPILE=${MLFS_TARGET}- \
  --prefix=/ \
  --target=${MLFS_TARGET} 
make
DESTDIR=/cross-tools make install

==[ToolChain: GCC Final]==
tar -xf ../mpfr-4.0.1.tar.xz
mv -v mpfr-4.0.1 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc
patch -Np1 -i ../gcc-7.3.0-dragora-musl-fixes.patch
mkdir build && cd  build
AR=ar LDFLAGS="-Wl,-rpath,/cross-tools/lib" \
../configure \
    --prefix=/cross-tools \
    --build=${MLFS_HOST} \
    --host=${MLFS_HOST} \
    --target=${MLFS_TARGET} \
    --disable-multilib \
    --with-sysroot=${MLFS} \
    --disable-nls \
    --enable-shared \
    --enable-languages=c,c++ \
    --enable-__cxa_atexit \
    --enable-c99 \
    --enable-long-long \
    --enable-threads=posix \
    --enable-clocale=generic \
    --enable-libstdcxx-time \
    --enable-checking=release \
    --enable-fully-dynamic-string \
    --disable-symvers \
    --disable-gnu-indirect-function \
    --disable-libmudflap \
    --disable-libsanitizer \
    --disable-libmpx \
    --disable-lto-plugin \
    --disable-libssp 
make AS_FOR_TARGET="${MLFS_TARGET}-as" \
    LD_FOR_TARGET="${MLFS_TARGET}-ld"
make install

==[ToolChain: File]==
./configure --prefix=/cross-tools
make && make install

==[ToolChain: Ncurses]==
./configure --prefix=/cross-tools \
    --without-debug --without-shared
make -C include
make -C progs tic
install -m755 progs/tic /cross-tools/bin

==[ToolChain: Sysroot Wrapper]==
cat > sysroot_wrapper.c << "EOF"
#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

char *sysrootdir = "";

int main(int argc, char *argv[]) {
  sysrootdir = getenv("CLFS");
  if (!sysrootdir)
    sysrootdir="";

  int stdout_pipe[2];
  pipe(stdout_pipe);

  pid_t pid = fork();

  if (pid == 0) {
    /* Redirect stdout to our pipe */
    close(1);
    dup(stdout_pipe[1]);
    close(stdout_pipe[0]);
    close(stdout_pipe[1]);

    char *name = strdup(argv[0]);
    strcat(name, ".sysroot");

    execvp(name, argv);

    free(name);

    exit(0);
  } else {
    /* Close stdout for write */
    close(stdout_pipe[1]);

    /* redirect our stdout pipe from the child to our stdin */
    close(0);
    dup(stdout_pipe[0]);
    close(stdout_pipe[0]);

    char c, lc;
    char *d = malloc(1);
    int d_len = 0;

    while ((c = fgetc(stdin)) != EOF) {
      d_len++;
      d = realloc(d, d_len + 1);
      *(d + d_len - 1) = c;
      *(d + d_len) = '\0';

      if ((lc == '-')&&((c == 'L')||(c == 'I'))) {
        d_len = d_len + strlen(sysrootdir);
        d = realloc(d, d_len + 1);
        strcat(d, sysrootdir);
      }

      lc = c;
    }

    printf ("%s", d);
    free(d);

    exit(0);
  }

  return 0;
}
EOF
# compile wrapper:
gcc sysroot_wrapper.c -o /cross-tools/bin/sysroot_wrapper
#backed up /cross-tools

=={ TC : Binutils Pass1 }==#######################################
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
mkdir -v build && cd build
../configure --prefix=/tools            \
             --with-sysroot=$MLFS        \
             --with-lib-path=/tools/lib \
             --build=${MLFS_HOST} \
             --host=${MLFS_TARGET} \
             --target=${MLFS_TARGET}          \
             --disable-nls              \
             --disable-werror
make
case $(uname -m) in
  x86_64) mkdir -v /tools/lib && ln -sv lib /tools/lib64 ;;
esac
make install
make -C ld clean
make -C ld LIB_PATH=/tools/lib
cp -v ld/ld-new /tools/bin

=={ TC: GCC Pass 1        }==####################################
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
tar -xf ../mpfr-4.0.1.tar.xz
mv -v mpfr-4.0.1 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc
patch -Np1 -i ../gcc-7.3.0-dragora-musl-fixes.patch
#change the location of GCC's default dynamic linker to use the one installed in /tools
#for file in gcc/config/{linux,i386/linux{,64}}.h
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done
#check these files:
#'gcc/config/linux.h'
#'gcc/config/i386/linux.h'
#'gcc/config/i386/linux64.h'
case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
 ;;
esac
mkdir -v build && cd build
../configure                                       \
    --target=${MLFS_TARGET}                        \
    --build=${MLFS_HOST} \
    --host=${MLFS_TARGET} \
    --prefix=/tools                                \
    --with-sysroot=$MLFS                            \
    --with-newlib                                  \
    --without-headers                              \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --disable-nls                                  \
    --disable-shared                               \
    --disable-multilib                             \
    --disable-threads                              \
    --disable-libatomic                            \
    --disable-libgomp                              \
    --disable-libmpx                               \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-libstdcxx                            \
    --enable-languages=c,c++ \
    --disable-libstdcxx-pch \
    --disable-symvers \
    --disable-libitm \
    --disable-gnu-indirect-function \
    --disable-libmudflap \
    --disable-libsanitizer \
    --disable-libcilkrts
make && make install

=={ Adjust Toolchain }==################################################
mv -v /tools/bin/{ld,ld-old}
mv -v /tools/$(${MLFS_TARGET}-gcc -dumpmachine)/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/$(${MLFS_TARGET}-gcc -dumpmachine)/bin/ld

SPECFILE=`dirname $(${MLFS_TARGET}-gcc -print-libgcc-file-name)`/specs &&
${MLFS_TARGET}-gcc -dumpspecs > $SPECFILE &&
#modify file for every /lib/ld-musl-x86_64.so.1 to /tools/lib/ld-musl-x85_64.so.1
mv -vf tempspecfile $SPECFILE &&
unset SPECFILE

GCC_INCLUDEDIR=`dirname $(${MLFS_TARGET}-gcc -print-libgcc-file-name)`/include &&
find ${GCC_INCLUDEDIR}/* -maxdepth 0 -xtype d -exec rm -rvf '{}' \; &&
rm -vf `grep -l "DO NOT EDIT THIS FILE" ${GCC_INCLUDEDIR}/*` &&
unset GCC_INCLUDEDIR

=={ TC: kernel headers }===#############################################
#should be built first
make mrproper
ARCH=x86 make INSTALL_HDR_PATH=dest headers_install
find dest/include \( -name .install -o -name ..install.cmd \) -delete
cp -rv dest/include/* /tools/include

=={ TC: Musl Libc        }===###########################################
./configure \
  CROSS_COMPILE=${MLFS_TARGET}- \
  --prefix=/ \
  --target=${MLFS_TARGET} 
make && make DESTDIR=/tools install
#make sure symlink is valid: /tools/lib/ld-musl-x86_64.so.1

=={ TC: Libstdc++        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
patch -Np1 -i ../gcc-7.3.0-dragora-musl-fixes.patch
mkdir -v build && cd build
../libstdc++-v3/configure           \
    --target=${MLFS_TARGET}         \
    --build=${MLFS_HOST}            \
    --host=${MLFS_TARGET}           \
    --prefix=/tools                 \
    --disable-multilib              \
    --disable-nls                   \
    --disable-libstdcxx-threads     \
    --disable-libstdcxx-pch         \
    --with-gxx-include-dir=/tools/${MLFS_TARGET}/include/c++/7.3.0
make && make install

=={ TC: Binutils Pass 2       }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
mkdir -v build && cd build
../configure                   \
    --target=${MLFS_TARGET}    \
    --build=${MLFS_HOST}       \
    --host=${MLFS_TARGET}      \
    --prefix=/tools            \
    --disable-nls              \
    --disable-werror           \
    --with-lib-path=/tools/lib \
    --with-sysroot
make && make install
make -C ld clean
make -C ld LIB_PATH=/usr/lib:/lib
cp -v ld/ld-new /tools/bin

=={ TC: GCC Pass 2        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
tar -xf ../mpfr-4.0.1.tar.xz
mv -v mpfr-4.0.1 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc
patch -Np1 -i ../gcc-7.3.0-dragora-musl-fixes.patch
cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done
case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac
mkdir -v build && cd build
../configure                                       \
    --target=${MLFS_TARGET}    \
    --build=${MLFS_HOST}       \
    --host=${MLFS_TARGET}      \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++                       \
    --disable-libstdcxx-pch                        \
    --disable-multilib                             \
    --disable-bootstrap                            \
    --disable-libgomp \
    --disable-libmpx                               \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --enable-languages=c,c++ \
    --disable-libstdcxx-pch \
    --disable-symvers \
    --disable-libitm \
    --disable-gnu-indirect-function \
    --disable-libmudflap \
    --disable-libsanitizer \
    --disable-libcilkrts
make && make install
ln -sv gcc /tools/bin/cc

=={ TC: M4      }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --prefix=/tools \
            --build=${MLFS_HOST} \
            --host=${MLFS_TARGET}
make && make install

=={ TC: Ncurses      }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
sed -i '/LIBTOOL_INSTALL/d' c++/Makefile.in
./configure --prefix=/tools \
    --build=${MLFS_HOST} \
    --host=${MLFS_TARGET} \
    --with-shared   \
    --without-debug \
    --without-ada   \
    --enable-widec  \
    --enable-overwrite     \
    --with-build-cc="gcc -D_GNU_SOURCE"
make && make install

=={ TC: Bash         }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
cat > config.cache << "EOF"
ac_cv_func_mmap_fixed_mapped=yes
ac_cv_func_strcoll_works=yes
ac_cv_func_working_mktime=yes
bash_cv_func_sigsetjmp=present
bash_cv_getcwd_malloc=yes
bash_cv_job_control_missing=present
bash_cv_printf_a_format=yes
bash_cv_sys_named_pipes=present
bash_cv_ulimit_maxfds=yes
bash_cv_under_sys_siglist=yes
bash_cv_unusable_rtsigs=no
gt_cv_int_divbyzero_sigfpe=yes
EOF
./configure --prefix=/tools \
            --without-bash-malloc \
            --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --cache-file=config.cache
make && make install

=={ TC: Bison        }===============================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Bzip2        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
cp Makefile{,.orig}
sed -e "/^all:/s/ test//" Makefile.orig > Makefile
sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile
sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile
make -f Makefile-libbz2_so CC="${CC}" AR="${AR}" RANLIB="${RANLIB}"
make clean
make CC="${CC}" AR="${AR}" RANLIB="${RANLIB}"
make PREFIX=/tools install

=={ TC: Coreutils        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
autoreconf -vif
cat > config.cache << EOF
fu_cv_sys_stat_statfs2_bsize=yes
gl_cv_func_rename_trailing_slash_bug=no
gl_cv_func_mbrtowc_incomplete_state=yes
gl_cv_func_mbrtowc_nul_retval=yes
gl_cv_func_mbrtowc_null_arg=yes
gl_cv_func_mbrtowc_retval=yes
gl_cv_func_btowc_eof=yes
gl_cv_func_wcrtomb_retval=yes
gl_cv_func_wctob_works=yes
EOF
sed -i '/test.lock/s/^/#/' gnulib-tests/gnulib.mk
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools \
            --cache-file=config.cache 
make && make install

=={ TC: Diffutils        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: file        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: findutils        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Gawk        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Gettext        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
cd gettext-tools
EMACS="no" \
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools \
            --disable-shared
make -C gnulib-lib
make -C intl pluralx.c
make -C src msgfmt
make -C src msgmerge
make -C src xgettext
cp -v src/{msgfmt,msgmerge,xgettext} /tools/bin

=={ TC: Grep        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Gzip        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Make        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools \
            --without-guile
make && make install

=={ TC: Patch        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Perl        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
#use perl-cross, cp over perl source
#OR use patch -Np1 -i ../perl-5.26.1-cross-1.2.patch
./configure --prefix=/tools \
            --target=${MLFS_TARGET}
make
cp -v perl cpan/podlators/scripts/pod2man /tools/bin
mkdir -pv /tools/lib/perl5/5.26.1
cp -Rv lib/* /tools/lib/perl5/5.26.1

=={ TC: Sed        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Tar        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Texinfo        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Util-linux     )================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools \
	    --without-python               \
            --disable-makeinstall-chown    \
            --without-systemdsystemunitdir \
            --without-ncurses              \
            PKG_CONFIG=""
make && make install

=={ TC: Xz        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools
make && make install

=={ TC: Porg        }================================================
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"
patch -Np0 -i ../porg-0.10-musl-fix-64.diff
cat > config.cache << "EOF"
ac_cv_func_creat64=no
ac_cv_func_fopen64=no
ac_cv_func_freopen64=no
ac_cv_func_open64=no
ac_cv_func_openat64=no
EOF
./configure --build=${MLFS_HOST} \
            --host=${MLFS_TARGET} \
            --prefix=/tools \
	    --sysconfdir=/tools/etc \
            --disable-grop \
            --cache-file=config.cache
make && make install

===[Preparing Virtual Kernel File Systems]===========================
#This section is done by root
export MLFS=/mnt/mlfs

mkdir -pv $MLFS/{dev,proc,sys,run}
mknod -m 600 $MLFS/dev/console c 5 1
mknod -m 666 $MLFS/dev/null c 1 3

mount -v --bind /dev $MLFS/dev
mount -vt devpts devpts $MLFS/dev/pts -o gid=5,mode=620
mount -vt proc proc $MLFS/proc
mount -vt sysfs sysfs $MLFS/sys
mount -vt tmpfs tmpfs $MLFS/run
if [ -h $LFS/dev/shm ]; then
  mkdir -pv $MLFS/$(readlink $MLFS/dev/shm)
fi

==[Entering the Chroot Environment]===================================
chroot "$MLFS" /tools/bin/env -i \
    HOME=/root                  \
    TERM="$TERM"                \
    PS1='(lfs chroot) \u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
    /tools/bin/bash --login +h

==[Creating Directories]===============================================
mkdir -pv /{bin,boot,etc/{opt,sysconfig},home,lib/firmware,mnt,opt}
mkdir -pv /{media/{floppy,cdrom},sbin,srv,var}
install -dv -m 0750 /root
install -dv -m 1777 /tmp /var/tmp
mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src}
mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man}
mkdir -v  /usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -v  /usr/libexec
mkdir -pv /usr/{,local/}share/man/man{1..8}

case $(uname -m) in
 x86_64) mkdir -v /lib64 ;;
esac

mkdir -v /var/{log,mail,spool}
ln -sv /run /var/run
ln -sv /run/lock /var/lock
mkdir -pv /var/{opt,cache,lib/{color,misc,locate},local}

==[Creating Essential Files and Symlinks]=============================
ln -sv /tools/bin/{bash,cat,dd,echo,ln,pwd,rm,stty} /bin
ln -sv /tools/bin/{install,perl} /usr/bin
ln -sv /tools/lib/libgcc_s.so{,.1} /usr/lib
ln -sv /tools/lib/libstdc++.{a,so{,.6}} /usr/lib
ln -sv bash /bin/sh 

ln -sv /proc/self/mounts /etc/mtab

cat > /etc/passwd << "EOF"
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
EOF

cat > /etc/group << "EOF"
root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
input:x:24:
mail:x:34:
nogroup:x:99:
users:x:999:
EOF

exec /tools/bin/bash --login +h

touch /var/log/{btmp,lastlog,faillog,wtmp}
chgrp -v utmp /var/log/lastlog
chmod -v 664  /var/log/lastlog
chmod -v 600  /var/log/btmp
# If using porg as package manager:
#mkdir -v /var/log/porg

==[FS: Kernel Headers]===============================================
make mrproper
make INSTALL_HDR_PATH=dest headers_install
find dest/include \( -name .install -o -name ..install.cmd \) -delete
cp -rv dest/include/* /usr/include

==[FS: Man-Pages]=====================================================
make install

==[FS: Musl Libc]=====================================================
./configure --prefix=/usr
make && make install
ln -sv /lib/ld-musl-x86_64.so.1 /bin/ldd

==[ Adjust Toolchain ]================================================
mv -v /tools/bin/{ld,ld-old}
mv -v /tools/${MLFS_TARGET}/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/${MLFS_TARGET}/bin/ld

export SPECFILE=`dirname $(gcc -print-libgcc-file-name)`/specs
gcc -dumpspecs | sed -e 's@/tools@@g'                   \
    -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
    -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' >  tempspecfile
#check file for every occurance of /tools/lib/ld-musl-x85_64.so.1 to /lib/ld-musl-x86_64.so.1
#check so that this line looks like this:
#*startfile_prefix_spec:
#/usr/lib
#and this line:
#*cpp:
#%{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT} -isystem /usr/include

mv -vf tempspecfile $SPECFILE &&
unset SPECFILE

==[FS: argp-standalone-1.3]===========================================
CFLAGS=" -fPIC" ./configure --prefix=/usr --disable-static
make
cp -v libargp.a /usr/lib/
cp -v argp.h    /usr/include/

==[FS: Zlib ]=========================================================
./configure --prefix=/usr && make && make install
mv -v /usr/lib/libz.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libz.so) /usr/lib/libz.so

==[FS: File ]=========================================================
./configure --prefix=/usr && make && make install

==[FS: Readline]======================================================
sed -i '/MV.*old/d' Makefile.in
sed -i '/{OLDSUFF}/c:' support/shlib-install
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/readline-7.0
make SHLIB_LIBS="-L/tools/lib -lncursesw"
make SHLIB_LIBS="-L/tools/lib -lncurses" install
mv -v /usr/lib/lib{readline,history}.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libreadline.so) /usr/lib/libreadline.so
ln -sfv ../../lib/$(readlink /usr/lib/libhistory.so ) /usr/lib/libhistory.so

==[FS: M4 ]===========================================================
./configure --prefix=/usr && make && make install

==[FS: Bc ]===========================================================
cat > bc/fix-libmath_h << "EOF"
#! /bin/bash
sed -e '1   s/^/{"/' \
    -e     's/$/",/' \
    -e '2,$ s/^/"/'  \
    -e   '$ d'       \
    -i libmath.h

sed -e '$ s/$/0}/' \
    -i libmath.h
EOF
ln -sv /tools/lib/libncursesw.so.6 /usr/lib/libncursesw.so.6
ln -sfv libncurses.so.6 /usr/lib/libncurses.so
sed -i -e '/flex/s/as_fn_error/: ;; # &/' configure
./configure --prefix=/usr           \
            --with-readline         \
            --mandir=/usr/share/man \
            --infodir=/usr/share/info
make && make install

==[FS: Binutils]=====================================================
mkdir -v build && cd build
../configure --prefix=/usr       \
             --enable-gold       \
             --enable-ld=default \
             --enable-plugins    \
             --enable-shared     \
             --disable-werror    \
             --enable-64-bit-bfd \
             --with-system-zlib  \
             --enable-relro \
             --enable-lto \
             --enable-nls \
             --enable-deterministic-archives \
             --enable-threads \
             --enable-install-libiberty \
             --disable-compressed-debug-sections \
             --enable-targets=i386-efi-pe,x86_64-pep
make tooldir=/usr
make tooldir=/usr install

==[FS: GMP]==========================================================
./configure --prefix=/usr    \
            --enable-cxx     \
            --disable-static \
            --docdir=/usr/share/doc/gmp-6.1.2
make && make install

==[FS: MPFR]=========================================================
./configure --prefix=/usr        \
            --disable-static     \
            --enable-thread-safe \
            --docdir=/usr/share/doc/mpfr-4.0.1
make && make install

==[FS: MPC]==========================================================
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/mpc-1.1.0
make && make install

==[FS: GCC]==========================================================
tar -xf ../isl-0.18.tar.bz2
mv -v isl-0.18 isl
patch -Np1 -0 ../gcc-7.3.0-fix-cxxflags-passing.patch
patch -Np0 -i ../gcc-7.3.0-fix-musl-execinfo.patch
patch -Np0 -i ../gcc-7.3.0-no-stack_chk_fail_local.patch
case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac
rm -vf /usr/lib/gcc
mkdir -v build && cd build
SED=sed  libat_cv_have_ifunc=no       \
../configure --prefix=/usr            \
             --enable-languages=c,c++ \
             --disable-multilib       \
             --disable-bootstrap      \
             --with-system-zlib       \
             --enable-shared \
             --enable-threads=posix \
             --enable-__cxa_atexit \
             --enable-c99 \
             --enable-long-long \
             --enable-clocale=generic \
             --enable-languages=c,c++ \
             --disable-libstdcxx-pch \
             --enable-tls \
             --enable-nls \
             --enable-lto \
             --enable-libstdcxx-time \
             --enable-checking=release \
             --enable-fully-dynamic-string \
             --disable-symvers \
             --disable-gnu-indirect-function \
             --disable-libmudflap \
             --disable-libsanitizer \
	     --enable-default-pie \
             --enable-vtable-verify \
             --with-default-libstdcxx-abi=gcc4-compatible \
             --disable-target-libiberty \
             --disable-libunwind-exceptions \
             --with-isl \
             --enable-linker-build-id \
             --enable-fast-character \
             --with-linker-hash-style=gnu \
             --build=x86_64-linux-musl \
             --disable-libssp
make && make install
ln -sv ../usr/bin/cpp /lib
ln -sv gcc /usr/bin/cc
install -v -dm755 /usr/lib/bfd-plugins
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/7.3.0/liblto_plugin.so \
        /usr/lib/bfd-plugins/
mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib

==[FS: Bzip2]=========================================================
patch -Np1 -i ../bzip2-1.0.6-install_docs-1.patch
sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile
sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile
make -f Makefile-libbz2_so
make clean
make && make PREFIX=/usr install
cp -v bzip2-shared /bin/bzip2
cp -av libbz2.so* /lib
ln -sv ../../lib/libbz2.so.1.0 /usr/lib/libbz2.so
rm -v /usr/bin/{bunzip2,bzcat,bzip2}
ln -sv bzip2 /bin/bunzip2
ln -sv bzip2 /bin/bzcat

==[FS: Pkg-config]====================================================
./configure --prefix=/usr              \
            --with-internal-glib       \
            --disable-host-tool        \
            --docdir=/usr/share/doc/pkg-config-0.29.2
make && make install

==[FS: Ncurses]=======================================================
sed -i '/LIBTOOL_INSTALL/d' c++/Makefile.in
./configure --prefix=/usr           \
            --mandir=/usr/share/man \
            --with-shared           \
            --without-debug         \
            --with-normal        \
            --enable-pc-files       \
            --enable-widec
make && make install &&
mv -v /usr/lib/libncursesw.so.6* /lib &&
ln -sfv ../../lib/$(readlink /usr/lib/libncursesw.so) /usr/lib/libncursesw.so
for lib in ncurses form panel menu ; do
    rm -vf                    /usr/lib/lib${lib}.so
    echo "INPUT(-l${lib}w)" > /usr/lib/lib${lib}.so
    ln -sfv ${lib}w.pc        /usr/lib/pkgconfig/${lib}.pc
done
rm -vf                     /usr/lib/libcursesw.so
echo "INPUT(-lncursesw)" > /usr/lib/libcursesw.so
ln -sfv libncurses.so      /usr/lib/libcurses.so

==[FS: Attr]============================================================
./configure --prefix=/usr     \
            --bindir=/bin     \
            --disable-static  \
            --sysconfdir=/etc \
            --docdir=/usr/share/doc/attr-2.4.48
make && make install
mv -v /usr/lib/libattr.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libattr.so) /usr/lib/libattr.so

==[FS: ACL]=============================================================
./configure --prefix=/usr         \
            --bindir=/bin         \
            --disable-static      \
            --libexecdir=/usr/lib \
            --docdir=/usr/share/doc/acl-2.2.53
make && make install
mv -v /usr/lib/libacl.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libacl.so) /usr/lib/libacl.so


==[FS: Libcap]==========================================================
sed -i '/install.*STALIBNAME/d' libcap/Makefile
make && make RAISE_SETFCAP=no lib=lib prefix=/usr install
chmod -v 755 /usr/lib/libcap.so
mv -v /usr/lib/libcap.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libcap.so) /usr/lib/libcap.so

==[FS: Sed]==============================================================
sed -i 's/usr/tools/'                 build-aux/help2man
sed -i 's/testsuite.panic-tests.sh//' Makefile.in
./configure --prefix=/usr --bindir=/bin
make && make install

==[FS: Shadow]===========================================================
sed -i 's/groups$(EXEEXT) //' src/Makefile.in
find man -name Makefile.in -exec sed -i 's/groups\.1 / /'   {} \;
find man -name Makefile.in -exec sed -i 's/getspnam\.3 / /' {} \;
find man -name Makefile.in -exec sed -i 's/passwd\.5 / /'   {} \;
sed -i -e 's@#ENCRYPT_METHOD DES@ENCRYPT_METHOD SHA512@' \
       -e 's@/var/spool/mail@/var/mail@' etc/login.defs
sed -i 's/1000/999/' etc/useradd
./configure --sysconfdir=/etc --with-group-name-max-length=32
make && make install
mv -v /usr/bin/passwd /bin
sed -i 's/yes/no/' /etc/default/useradd
passwd root

==[FS: Psmisc]===========================================================
./configure --prefix=/usr && make && make install
mv -v /usr/bin/fuser   /bin
mv -v /usr/bin/killall /bin

==[FS: Iana-Etc]=========================================================
make && make install

==[FS: Bison]============================================================
./configure --prefix=/usr --docdir=/usr/share/doc/bison-3.0.5
make && make install

==[FS: Flex]=============================================================
HELP2MAN=/tools/bin/true \
./configure --prefix=/usr --docdir=/usr/share/doc/flex-2.6.4
make && make install
ln -sv flex /usr/bin/lex

==[FS: Grep]=============================================================
./configure --prefix=/usr --bindir=/bin && make && make install

==[FS: Bash]=============================================================
./configure --prefix=/usr                       \
            --docdir=/usr/share/doc/bash-4.4.18 \
            --without-bash-malloc               \
            --with-installed-readline
make && make install
mv -vf /usr/bin/bash /bin

==[FS: Libtool]=========================================================
./configure --prefix=/usr && make && make install

==[FS: GDBM]============================================================
./configure --prefix=/usr \
            --disable-static \
            --enable-libgdbm-compat
make && make install

==[FS: Gperf]===========================================================
./configure --prefix=/usr --docdir=/usr/share/doc/gperf-3.1
make && make install

==[FS: Expat]===========================================================
sed -i 's|usr/bin/env |bin/|' run.sh.in
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/expat-2.2.5
make && make install

==[FS: Inetutils]========================================================
./configure --prefix=/usr        \
            --localstatedir=/var \
            --disable-logger     \
            --disable-whois      \
            --disable-rcp        \
            --disable-rexec      \
            --disable-rlogin     \
            --disable-rsh        \
            --disable-servers
make && make install

==[FS: Perl]============================================================
echo "127.0.0.1 localhost $(hostname)" > /etc/hosts
export BUILD_ZLIB=False
export BUILD_BZIP2=0
sh Configure -des -Dprefix=/usr                 \
                  -Dvendorprefix=/usr           \
                  -Dman1dir=/usr/share/man/man1 \
                  -Dman3dir=/usr/share/man/man3 \
                  -Dpager="/usr/bin/less -isR"  \
                  -Duseshrplib                  \
                  -Dusethreads
make && make install
unset BUILD_ZLIB BUILD_BZIP2

==[FS: XML::Parser]=====================================================
perl Makefile.PL && make && make install

==[FS: Intltool]========================================================
sed -i 's:\\\${:\\\$\\{:' intltool-update.in
./configure --prefix=/usr && make && make install

==[FS: Autoconf]========================================================
patch -Np1 -i ../autoconf-2.69-musl.patch 
./configure --prefix=/usr && make && make install

==[FS: Automake]========================================================
./configure --prefix=/usr --docdir=/usr/share/doc/automake-1.16.1
make && make install

==[FS: Musl-fts-1.2.7]==================================================
sed -i "/pkgconfig_DATA/i pkgconfigdir=/usr/lib/pkgconfig" Makefile.am
./bootstrap.sh
./configure --prefix=/usr
make & make install

==[FS: Musl-obstack-1.1]================================================
sed -i "/pkgconfig_DATA/i pkgconfigdir=/usr/lib/pkgconfig" Makefile.am
./bootstrap.sh
./configure --prefix=/usr
make & make install

==[FS: Xz]==============================================================
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/xz-5.2.3
make && make install
mv -v   /usr/bin/{lzma,unlzma,lzcat,xz,unxz,xzcat} /bin
mv -v /usr/lib/liblzma.so.* /lib
ln -svf ../../lib/$(readlink /usr/lib/liblzma.so) /usr/lib/liblzma.so

==[FS: Kmod]============================================================
./configure --prefix=/usr          \
            --bindir=/bin          \
            --sysconfdir=/etc      \
            --with-rootlibdir=/lib \
            --with-xz              \
            --with-zlib
make && make install
for target in depmod insmod lsmod modinfo modprobe rmmod; do
  ln -sfv ../bin/kmod /sbin/$target
done

ln -sfv kmod /bin/lsmod

==[FS: Gettext]========================================================
sed -i '/^TESTS =/d' gettext-runtime/tests/Makefile.in &&
sed -i 's/test-lock..EXEEXT.//' gettext-tools/gnulib-tests/Makefile.in
sed -e '/AppData/{N;N;p;s/\.appdata\./.metainfo./}' \
    -i gettext-tools/its/appdata.loc
./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/gettext-0.19.8.1
make && make install

==[FS: Libelf]=========================================================
cp -v ../elfutils-0.173-error.h lib/error.h
cp -v ../elfutils-0.173-error.h src/error.h
patch -Np0 -i ../elfutils-0.173-fix-uninitialized.patch 
patch -Np0 -i ../elfutils-0.173-musl-cdefs.patch
patch -Np0 -i ../elfutils-0.173-musl-fts-obstack.patch
patch -Np0 -i ../elfutils-0.173-musl-macros.patch 
patch -Np0 -i ../elfutils-0.173-musl-qsort_r.patch
patch -Np0 -i ../elfutils-0.173-musl-strerror_r.patch 
patch -Np0 -i ../elfutils-0.173-musl-strndupa.patch 
autoreconf -if
CFLAGS="-Wno-error" \
./configure --prefix=/usr --build=x86_64-linux-musl && make
make -C libelf install
install -vm644 config/libelf.pc /usr/lib/pkgconfig

==[FS: Libffi]=========================================================
sed -e '/^includesdir/ s/$(libdir).*$/$(includedir)/' \
    -i include/Makefile.in

sed -e '/^includedir/ s/=.*$/=@includedir@/' \
    -e 's/^Cflags: -I${includedir}/Cflags:/' \
    -i libffi.pc.in
./configure --prefix=/usr --disable-static --with-gcc-arch=x86-64
make && make install

==[FS:LibreSSL]========================================================
#patch -Np0 -i ../libressl-2.7.4-fail-instead-of-trying-fallback.patch
./config --prefix=/usr       \
            --with-openssldir=/etc/ssl
make && make install

==[FS: Python 3
patch -Np0 -i ../Python-3.6.4-libressl-2.7.patch 
patch -Np0 -i ../Python-3.6.4-musl-find_library.patch 
rm -r Modules/zlib
rm -r Modules/expat
rm -r Modules/_ctypes/{darwin,libffi}*
./configure --prefix=/usr       \
            --enable-shared     \
            --with-system-expat \
            --with-system-ffi   \
            --with-ensurepip=yes \
            --enable-ipv6 \
            --with-threads
make && make install 
chmod -v 755 /usr/lib/libpython3.6m.so
chmod -v 755 /usr/lib/libpython3.so

==[FS: Ninja]==========================================================
patch -Np1 -i ../ninja-1.8.2-add_NINJAJOBS_var-1.patch
python3 configure.py --bootstrap
install -vm755 ninja /usr/bin/
install -vDm644 misc/bash-completion /usr/share/bash-completion/completions/ninja
install -vDm644 misc/zsh-completion  /usr/share/zsh/site-functions/_ninja

==[FS: Meson]===========================================================
python3 setup.py build
python3 setup.py install --root=dest
cp -rv dest/* /

==[FS: Procps-ng]========================================================
autoreconf -fi
./configure --prefix=/usr                            \
            --exec-prefix=                           \
            --libdir=/usr/lib                        \
            --docdir=/usr/share/doc/procps-ng-3.3.15 \
            --disable-static                         \
            --disable-kill \
            --without-systemd --disable-modern-top
make && make install
mv -v /usr/lib/libprocps.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libprocps.so) /usr/lib/libprocps.so

==[FS: E2fsprogs]=========================================================
autoreconf -fi
mkdir -v build && cd build
LIBS=-L/tools/lib                    \
CFLAGS=-I/tools/include              \
PKG_CONFIG_PATH=/tools/lib/pkgconfig \
../configure --prefix=/usr           \
             --bindir=/bin           \
             --with-root-prefix=""   \
             --enable-elf-shlibs     \
             --disable-libblkid      \
             --disable-libuuid       \
             --disable-uuidd         \
             --disable-fsck \
             --enable-e2initrd-helper \
             --disable-rpath 
make && make install && make install-libs
chmod -v u+w /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a
gunzip -v /usr/share/info/libext2fs.info.gz
install-info --dir-file=/usr/share/info/dir /usr/share/info/libext2fs.info

==[FS: Coreutils]=========================================================
patch -Np1 -i ../coreutils-8.29-i18n-1.patch
autoreconf -vfi
sed -i '/test.lock/s/^/#/' gnulib-tests/gnulib.mk
FORCE_UNSAFE_CONFIGURE=1 ./configure \
            --prefix=/usr            \
            --enable-no-install-program=kill,uptime
FORCE_UNSAFE_CONFIGURE=1 make && make install
mv -v /usr/bin/{cat,chgrp,chmod,chown,cp,date,dd,df,echo} /bin
mv -v /usr/bin/{false,ln,ls,mkdir,mknod,mv,pwd,rm} /bin
mv -v /usr/bin/{rmdir,stty,sync,true,uname} /bin
mv -v /usr/bin/chroot /usr/sbin
mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8
sed -i s/\"1\"/\"8\"/1 /usr/share/man/man8/chroot.8
mv -v /usr/bin/{head,sleep,nice} /bin

==[FS: Check]=============================================================
./configure --prefix=/usr && make && make install
sed -i '1 s/tools/usr/' /usr/bin/checkmk

==[FS: Diffutils]==========================================================
./configure --prefix=/usr && make && make install

==[FS: Gawk]===============================================================
sed -i 's/extras//' Makefile.in
./configure --prefix=/usr && make && make install

==[FS: Findutils]==========================================================
sed -i 's/test-lock..EXEEXT.//' tests/Makefile.in
./configure --prefix=/usr --localstatedir=/var/lib/locate
make && make install
mv -v /usr/bin/find /bin
sed -i 's|find:=${BINDIR}|find:=/bin|' /usr/bin/updatedb

==[FS: Groff
PAGE=letter ./configure --prefix=/usr
make -j1 && make install

==[FS: GRUB]================================================================
#for BIOS-based PCs:
./configure --prefix=/usr          \
            --sbindir=/sbin        \
            --sysconfdir=/etc      \
            --disable-efiemu       \
            --disable-werror
#for UEFI-based PCs:
./configure --prefix=/usr          \
            --target=x86_64        \
            --with-platform=efi    \
            --sbindir=/sbin        \
            --sysconfdir=/etc      \
            --disable-werror
make && make install

==[FS: Less]================================================================
./configure --prefix=/usr --sysconfdir=/etc && make && make install

==[FS: Gzip]================================================================
./configure --prefix=/usr && make && make install
mv -v /usr/bin/gzip /bin

==[FS: IPRoute2]=============================================================
sed -i /ARPD/d Makefile
rm -fv man/man8/arpd.8
sed -i 's/.m_ipt.o//' tc/Makefile
make && make DOCDIR=/usr/share/doc/iproute2-4.17.0 install

==[FS: Kbd]===================================================================
patch -Np1 -i ../kbd-2.0.4-backspace-1.patch
sed -i 's/\(RESIZECONS_PROGS=\)yes/\1no/g' configure
sed -i 's/resizecons.8 //' docs/man/man8/Makefile.in
PKG_CONFIG_PATH=/tools/lib/pkgconfig ./configure --prefix=/usr --disable-vlock
make && make install

==[FS: Libpipeline]===========================================================
./configure --prefix=/usr && make && make install

==[FS: Make]==================================================================
./configure --prefix=/usr && make && make install

==[FS: Patch]=================================================================
./configure --prefix=/usr && make && make install

==[FS: Sysklogd]==============================================================
patch -Np1 -i ../sysklogd-1.5_musl.patch
sed -i '/Error loading kernel symbols/{n;n;d}' ksym_mod.c
sed -i 's/union wait/int/' syslogd.c
make && make BINDIR=/sbin install
cat > /etc/syslog.conf << "EOF"
# Begin /etc/syslog.conf

auth,authpriv.* -/var/log/auth.log
*.*;auth,authpriv.none -/var/log/sys.log
daemon.* -/var/log/daemon.log
kern.* -/var/log/kern.log
mail.* -/var/log/mail.log
user.* -/var/log/user.log
*.emerg *

# End /etc/syslog.conf
EOF

==[FS: Runit]==================================================================
cd src
echo "gcc -s -no-pie" > config-ld 
make
install -v runit runit-init /sbin
install -v runsvdir runsv chpst svlogd sv /usr/bin
install -v runsvchdir utmpset /usr/sbin
cp -v ../man/* /usr/share/man/man8
ln -svf /sbin/runit-init /sbin/init
mkdir -pv /etc/sv
mkdir -pv /etc/runit/runsvdir/single
mkdir -pv /etc/runit/runsvdir/multi

==[FS: Eudev]==================================================================
cat > config.cache << "EOF"
HAVE_BLKID=1
BLKID_LIBS="-lblkid"
BLKID_CFLAGS="-I/tools/include"
EOF
./configure --prefix=/usr           \
            --bindir=/sbin          \
            --sbindir=/sbin         \
            --libdir=/usr/lib       \
            --sysconfdir=/etc       \
            --libexecdir=/lib       \
            --with-rootprefix=      \
            --with-rootlibdir=/lib  \
            --enable-manpages       \
            --disable-static        \
            --config-cache
LIBRARY_PATH=/tools/lib make && make LD_LIBRARY_PATH=/tools/lib install
tar -xvf ../udev-lfs-20171102.tar.bz2
make -f udev-lfs-20171102/Makefile.lfs install

==[FS: Util-Linux]=============================================================
mkdir -pv /var/lib/hwclock
rm -vf /usr/include/{blkid,libmount,uuid}
./configure ADJTIME_PATH=/var/lib/hwclock/adjtime   \
            --docdir=/usr/share/doc/util-linux-2.32 \
            --disable-chfn-chsh  \
            --disable-login      \
            --disable-nologin    \
            --disable-su         \
            --disable-setpriv    \
            --disable-runuser    \
            --disable-pylibmount \
            --disable-static     \
            --without-python     \
            --without-systemd    \
            --without-systemdsystemunitdir
make && make install

==[FS: Man-DB]==================================================================
./configure --prefix=/usr                        \
            --docdir=/usr/share/doc/man-db-2.8.1 \
            --sysconfdir=/etc                    \
            --disable-setuid                     \
            --enable-cache-owner=bin             \
            --with-browser=/usr/bin/lynx         \
            --with-vgrind=/usr/bin/vgrind        \
            --with-grap=/usr/bin/grap            \
            --with-systemdtmpfilesdir=
make && make install

==[FS: Tar]=====================================================================
FORCE_UNSAFE_CONFIGURE=1  \
./configure --prefix=/usr \
            --bindir=/bin
make && make install

==[FS: Texinfo]=================================================================
sed -i '5481,5485 s/({/(\\{/' tp/Texinfo/Parser.pm
./configure --prefix=/usr --disable-static
make && make install

==[FS: Vim]=====================================================================
echo '#define SYS_VIMRC_FILE "/etc/vimrc"' >> src/feature.h
./configure --prefix=/usr && make && make install
ln -sv vim /usr/bin/vi
for L in  /usr/share/man/{,*/}man1/vim.1; do
    ln -sv vim.1 $(dirname $L)/vi.1
done
ln -sv ../vim/vim81/doc /usr/share/doc/vim-8.1
cat > /etc/vimrc << "EOF"
" Begin /etc/vimrc

" Ensure defaults are set before customizing settings, not after
source $VIMRUNTIME/defaults.vim
let skip_defaults_vim=1 

set nocompatible
set backspace=2
set mouse=
syntax on
if (&term == "xterm") || (&term == "putty")
  set background=dark
endif

" End /etc/vimrc
EOF

==[FS: Time Zone Utilities]====================================================
#https://www.iana.org/time-zones
make TZDIR=/usr/share/zoneinfo
cp -v zic zdump /usr/sbin
cp -v tzselect  /usr/bin
mkdir -pv /usr/share/zoneinfo/{posix,right}
install -m444 -t /usr/share/zoneinfo iso3166.tab zone1970.tab zone.tab
export timezones="africa antarctica asia australasia europe northamerica \
                southamerica pacificnew etcetera backward systemv factory"
zic -y ./yearistype -d /usr/share/zoneinfo ${timezones}
zic -y ./yearistype -d /usr/share/zoneinfo/posix ${timezones}
zic -y ./yearistype -d /usr/share/zoneinfo/right -L leapseconds ${timezones}
zic -y ./yearistype -d /usr/share/zoneinfo -p America/New_York
unset timezones
#use tzselect to determine <xxx>
cp -v /usr/share/zoneinfo/<xxx> /etc/localtime

==[FS: Porg]===================================================================
patch -Np0 -i ../porg-0.10-musl-fix-64.diff
cat > config.cache << "EOF"
ac_cv_func_creat64=no
ac_cv_func_fopen64=no
ac_cv_func_freopen64=no
ac_cv_func_open64=no
ac_cv_func_openat64=no
EOF
./configure --prefix=/usr \
	    --sysconfdir=/etc \
            --disable-grop \
            --cache-file=config.cache
make && make install

==[Stripping]==================================================================
exec /tools/bin/bash
/tools/bin/find /usr/lib -type f -name \*.a \
   -exec /tools/bin/strip --strip-debug {} ';'

/tools/bin/find /lib /usr/lib -type f \( -name \*.so* -a ! -name \*dbg \) \
   -exec /tools/bin/strip --strip-unneeded {} ';'

/tools/bin/find /{bin,sbin} /usr/{bin,sbin,libexec} -type f \
    -exec /tools/bin/strip --strip-all {} ';'

==[Cleaning up]=================================================================
rm -rvf /tmp/*
logout

chroot "$LFS" /usr/bin/env -i          \
    HOME=/root TERM="$TERM"            \
    PS1='(lfs chroot) \u:\w\$ '        \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin \
    /bin/bash --login
rm -vf /usr/lib/lib{bfd,opcodes}.a
rm -vf /usr/lib/libbz2.a
rm -vf /usr/lib/lib{com_err,e2p,ext2fs,ss}.a
rm -vf /usr/lib/libltdl.a
rm -vf /usr/lib/libfl.a
rm -vf /usr/lib/libz.a
find /usr/lib /usr/libexec -name \*.la -delete

==[Runit-for-LFS]================================================================
cd lfs-servicescripts
make && make install


