# Tool Chain: GCC-9.1.0 PASS 2 of 2
# Source: http://ftp.gnu.org/gnu/gcc/gcc-9.1.0/gcc-9.1.0.tar.xz
# Build and install as mlfs

# Set the environment for cross-compiling if not done already.
export CC="${MLFS_TARGET}-gcc"
export CXX="${MLFS_TARGET}-g++"
export AR="${MLFS_TARGET}-ar"
export AS="${MLFS_TARGET}-as"
export RANLIB="${MLFS_TARGET}-ranlib"
export LD="${MLFS_TARGET}-ld"
export STRIP="${MLFS_TARGET}-strip"

# Additional sources to add
tar -xf ../mpfr-4.0.2.tar.xz
mv -v mpfr-4.0.2 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc

# Apply patches [from void-linux]
patch -Np0 -i ../patches/gcc-9.1.0-void-patches/0010-ldbl128-config.patch
patch -Np0 -i ../patches/gcc-9.1.0-void-patches/ada-shared.patch
patch -Np0 -i ../patches/gcc-9.1.0-void-patches/fix-cxxflags-passing.patch
patch -Np0 -i ../patches/gcc-9.1.0-void-patches/fix-musl-execinfo.patch
patch -Np0 -i ../patches/gcc-9.1.0-void-patches/libgcc-musl-ldbl128-config.patch
patch -Np0 -i ../patches/gcc-9.1.0-void-patches/musl-ada.patch
patch -Np0 -i ../patches/gcc-9.1.0-void-patches/no-stack_chk_fail_local.patch
patch -Np0 -i ../patches/gcc-9.1.0-void-patches/non-nullness.patch

# Create a full version of the internal header using a command that is 
# identical to what the GCC build system does in normal circumstances: 
cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $($MLFS_TARGET-gcc -print-libgcc-file-name)`/include-fixed/limits.h
 
# Change the location of GCC's default dynamic linker to use the one installed in /tool
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

# Configure source
mkdir -v build && cd build
../configure                                       \
    --target=${MLFS_TARGET}    \
    --build=${MLFS_HOST}       \
    --host=${MLFS_TARGET}      \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++                       \
    --disable-libstdcxx-pch                        \
    --disable-multilib                             \
    --disable-bootstrap                            \
    --disable-libgomp \
    --disable-libmpx                               \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-symvers \
    --disable-libitm \
    --disable-gnu-indirect-function \
    --disable-libmudflap \
    --disable-libsanitizer \
    --disable-libcilkrts

# Build and install to toolchain
PATH=/bin:/usr/bin:/cross-tools/bin:/tools/bin make 
make install

# Add compatibility
ln -sv gcc /tools/bin/cc

# OPTIONAL: Test
# Check basic functions (compiling and linking) of the new toolchain are working as 
# expected. To perform a sanity check, run the following commands: 
echo 'int main(){}' > dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'

# If everything is working correctly, there should be no errors, and the output of 
# the last command will be of the form: 
# [Requesting program interpreter: /tools/lib/ld-musl-i386.so.1]
# or
# [Requesting program interpreter: /tools/lib/ld-musl-x86_64.so.1]

# Clean up after testing
rm -v dummy.c a.out
